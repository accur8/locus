package a8.locus

import io.undertow.server.{HttpHandler, HttpServerExchange}

import java.util.Collections
import a8.locus.Routing.{ErrorHandler, Router}
import io.undertow.Handlers
import io.undertow.security.api.{AuthenticationMechanism, AuthenticationMode}
import io.undertow.security.handlers.{AuthenticationCallHandler, AuthenticationConstraintHandler, AuthenticationMechanismsHandler, SecurityInitialHandler}
import io.undertow.security.impl.BasicAuthenticationMechanism
import io.undertow.server.handlers.encoding.{ContentEncodingRepository, DeflateEncodingProvider, EncodingHandler, GzipEncodingProvider}
import io.undertow.server.{HttpHandler, HttpServerExchange}
import io.undertow.util.HttpString
import SharedImports._
import a8.locus.Config.{SubnetManager, User}
import a8.locus.ResolvedModel.ResolvedRepo
import org.apache.commons.net.util.SubnetUtils

// TODO move this code into a shared location (model3 project) that can be shared by odin/mugatu/server and this aka for https://accur8.atlassian.net/browse/ODIN-2013
object Routing {

  class ErrorHandler(next: HttpHandler) extends HttpHandler {

    override def handleRequest(exchange: HttpServerExchange): Unit = {

      try {
        next.handleRequest(exchange)
      } catch {
        case th: Throwable =>
          if ( exchange.isResponseChannelAvailable ) {
            exchange.setStatusCode(500)
            exchange.getResponseSender.send(th.stackTraceAsString)
          }
      }

    }

  }


  case class Router(resolvedModel: ResolvedModel, anonymousSubnetManager: SubnetManager) {

    val anonymousHttpMethods =
      Set(
        "get",
        "head",
        "post",
      )

    import .ExchangeOps

    def anonymousLogin(exchange: HttpServerExchange): Option[User] =
      anonymousSubnetManager
        .isInSubnet(exchange.getSourceAddress, exchange.headerValue("X-Forwarded-For"))
        .toOption(User.anonymous)
        .filter(_ => anonymousHttpMethods.contains(exchange.getRequestMethod.toString.toLowerCase))

    def resolveUser(exchange: HttpServerExchange): Either[HttpResponse, User] = {

      def requireAuthenticationResponse =
        HttpResponse(
          content = HttpResponseBody.empty,
          statusCode = HttpStatusCode.NotAuthorized,
          headers = Map(
            HttpHeader.WWWAuthenticate -> s"""Basic realm="${resolvedModel.config.realm}""""
          )
        )

      Option(exchange.getRequestHeaders.get("Authorization"))
        .flatMap { headerValues =>
          headerValues.iterator().asScala.flatMap(authenticate).nextOption()
        }
        .orElse(anonymousLogin(exchange))
        .map(Right.apply)
        .getOrElse(Left(requireAuthenticationResponse))

    }

    def authenticate(authenticateHeaderValue: String): Option[User] = {

      authenticateHeaderValue.trim.splitList(" ", limit = 2) match {
        case List("Basic", credentialsBase64) =>
          val credentials = new String(java.util.Base64.getDecoder.decode(credentialsBase64))
          credentials.splitList(":", limit = 2) match {
            case List(user, password) =>
              resolvedModel
                .config
                .users
                .find(u => u.name =:= user && u.password =:= password)
            case _ =>
              None
          }
        case _ =>
          None
      }


    }

  }

}


case class Routing(resolvedModel: ResolvedModel) {

  lazy val anonymousSubnetManager: SubnetManager = {

    def parseSubnetUtils(subnetStr: String): Option[SubnetUtils] = {
      try {
        Some(new SubnetUtils(subnetStr))
      } catch {
        case e: Exception =>
          logger.error(s"invalid subnet in config -- ${subnetStr}", e)
          None
      }
    }

    val anonymousSubnets =
      resolvedModel
        .config
        .anonymousSubnets
        .flatMap(parseSubnetUtils)

    val proxyServerAddresses =
      resolvedModel
        .config
        .proxyServerAddresses
        .flatMap(parseSubnetUtils)

    SubnetManager(
      proxyServerAddresses,
      anonymousSubnets,
    )

  }

  def compressionHandler(next: HttpHandler) =
    new EncodingHandler(
      next,
      new ContentEncodingRepository()
        .addEncodingHandler("gzip", new GzipEncodingProvider, 100)
        .addEncodingHandler("deflate", new DeflateEncodingProvider, 10)
    )

  lazy val rootHandler =
    compressionHandler(
      new ErrorHandler(
        corsHandler(
          myHandlers
        )
      )
    )

  object AccessControlHeaders {

    val maxAgeHeaderName = new HttpString("Access-Control-Max-Age")
    val maxAgeValue = (24*60*60).toString  // 24 hours aka 86400 seconds is the max according to the spec

    val allowOriginHeaderName = new HttpString("Access-Control-Allow-Origin")

    val allowHeadersHeaderName = new HttpString("Access-Control-Allow-Headers")
    val allowHeadersValue = "Content-Type, Access-Control-Allow-Headers, Authorization, X-Requested-With"

  }

  val optionsRequestMethodName = new HttpString("OPTIONS")

  def corsHandler(next: HttpHandler) =
    new HttpHandler {
      override def handleRequest(exchange: HttpServerExchange): Unit = {
        import AccessControlHeaders._
        exchange.getResponseHeaders.put(maxAgeHeaderName, maxAgeValue)
        exchange.getResponseHeaders.put(allowOriginHeaderName, "*")
        exchange.getResponseHeaders.put(allowHeadersHeaderName, allowHeadersValue)
        next.handleRequest(exchange)
      }
    }

  lazy val router = Router(resolvedModel, anonymousSubnetManager)

  lazy val myHandlers = {
    val pathHandler =
      resolvedModel
        .resolvedProxyPaths
        .foldLeft(Handlers.path()) { case (pathHandler, resolvedProxy) =>
          pathHandler.addPrefixPath(s"/repos/${resolvedProxy.name}/", RepoHttpHandler(router, resolvedProxy))
        }
    pathHandler
      .addPrefixPath("/versionsVersion", new VersionsVersionHandler(resolvedModel.config))
      .addExactPath("/repos", new ListReposHandler(router))
      .addExactPath("/repos/", new ListReposHandler(router))
      .addExactPath("/", new RootHandler())
      .addExactPath("/index.html", new RootHandler())
      .addExactPath("/api/resolveDependencyTree", new ResolveDependencyTreeHandler)
      .addExactPath("/api/javaLauncherConfigDotNix", new JavaLauncherDotNixHandler(true))
      .addExactPath("/api/javaLauncherInstallerDotNix", new JavaLauncherDotNixHandler(false))
  }

}
